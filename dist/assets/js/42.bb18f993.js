(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{400:function(s,t,a){s.exports=a.p+"assets/img/image-20240405152709816.0fe3f2ec.png"},401:function(s,t,a){s.exports=a.p+"assets/img/image-20240406112427595.f2d6292b.png"},402:function(s,t,a){s.exports=a.p+"assets/img/image-20240406112508899.e0c17e42.png"},610:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"单选-2-30"}},[s._v("单选（2/30）")]),s._v(" "),n("p",[s._v("1.算法的时间复杂度与（）有关")]),s._v(" "),n("ul",[n("li",[s._v("A.问题规模")]),s._v(" "),n("li",[s._v("B.计算机硬件的运行速度")]),s._v(" "),n("li",[s._v("C.源程序的长度")]),s._v(" "),n("li",[s._v("D.编译后执行程序的质量")])]),s._v(" "),n("p",[s._v("2.向一个有 n 个元素的顺序表中插入一个新元素并保持原来顺序不变，则平均要移动（）个元素")]),s._v(" "),n("ul",[n("li",[s._v("A.n")]),s._v(" "),n("li",[s._v("B.n/2")]),s._v(" "),n("li",[s._v("C.2n")]),s._v(" "),n("li",[s._v("D.n^2")])]),s._v(" "),n("p",[s._v("3.设指针变量 p 指向单链表中结点 A，若除单链表中结点 A，则需要修改指针的操作序列为（）")]),s._v(" "),n("ul",[n("li",[s._v("A.q=p->next; p->data=q-data; p->next=q->next; free(q);")]),s._v(" "),n("li",[s._v("B.q=p->next; q->data=p->data; p->next=q->next; free(q);")]),s._v(" "),n("li",[s._v("C.q=p->next; p->next=q->next; free(q);")]),s._v(" "),n("li",[s._v("D.q=p->next; p->data=q->data; free(q);")])]),s._v(" "),n("p",[s._v("4.双向链表中有 2 个指针域 pre 和 next，分别指向直接前驱和直接后继，假设有指针 p 指向链表中的一个结点，指针 q 指向一个待插入的结点，则正确的在结点 p 之前插入结点 q 的语句为（）")]),s._v(" "),n("ul",[n("li",[s._v("A.p->pre->next=q; q->next=p; q->pre=p->pre; p->pre=q;")]),s._v(" "),n("li",[s._v("B.p->pre=q; q->next=p;q-pre-p-pre;p->pre=q;")]),s._v(" "),n("li",[s._v("C.q->pre=p->pre; p->pre->next=q; q->next=p; p->pre=q->next;")]),s._v(" "),n("li",[s._v("D.q-next=p; p->next=q; p->pre->next=q; q->next=p;")])]),s._v(" "),n("p",[s._v("5.已知栈的最大容量是 4，若进栈顺序为 ABCDEF，则可能的出栈顺序列为（）")]),s._v(" "),n("ul",[n("li",[s._v("A.CBEDAF")]),s._v(" "),n("li",[s._v("B.BCEFAD")]),s._v(" "),n("li",[s._v("C.ADFEBC")]),s._v(" "),n("li",[s._v("D.EDCBAF")])]),s._v(" "),n("p",[s._v("6.循环队列存储在数组"),n("code",[s._v("A[0...m]")]),s._v("中，入队时的操作为（）")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("A.rear = rear+1")])]),s._v(" "),n("li",[n("p",[s._v("C.rear = (rear+1) % (m+1)")])]),s._v(" "),n("li",[n("p",[s._v("B.rear = (rear+1) % m")])]),s._v(" "),n("li",[n("p",[s._v("D.rear = (rear+1) % (m-l)")])])]),s._v(" "),n("p",[s._v("7.假设用数组"),n("code",[s._v("A[50]")]),s._v("存放循环队列元素，头尾指针 front 和 rear，front=13， rear=5 时循环队列中元素的个数为（）")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("A.42")])]),s._v(" "),n("li",[n("p",[s._v("B.8")])]),s._v(" "),n("li",[n("p",[s._v("C.43")])]),s._v(" "),n("li",[n("p",[s._v("D.9")])])]),s._v(" "),n("p",[s._v("8.设串 s1=“ABCDEFG”，s2=“PQRST” 函数 Con(x, y) 返回 x 和 y 串的连接串，函数 Subs(s, i, j) 返回串 s 的从序号 i 开始的 j 个字符的子串，len(s) 返回串 s 的长度，则 Con(Subs(s1, 2, len(s2)), Subs(s1, len(s2), 2)) 的结果串是（）")]),s._v(" "),n("ul",[n("li",[s._v("A.BCDEF")]),s._v(" "),n("li",[s._v("B.BCDEFG")]),s._v(" "),n("li",[s._v("C.BCPORST")]),s._v(" "),n("li",[s._v("D.BCDEFEF")])]),s._v(" "),n("p",[s._v("9.设矩阵A是一个对称矩阵，为了节省存储，将其下三角部分(如图所示)按行序存放在一维数组"),n("code",[s._v("B[1...(n-1)/2]")]),s._v("中，对下三角部分中任一元素"),n("code",[s._v("a[i][j] (i<j)")]),s._v("，在一维数组 B 中下标 k 的值是（）")]),s._v(" "),n("img",{attrs:{src:a(400)}}),s._v(" "),n("ul",[n("li",[s._v("A.i(i-1)/2+j-1")]),s._v(" "),n("li",[s._v("B.i(i-1)/2+j")]),s._v(" "),n("li",[s._v("C.i(i+1)/2+j-1")]),s._v(" "),n("li",[s._v("D.i(i+1)/2+j")])]),s._v(" "),n("p",[s._v("10.假设一个电报使用 5 种字母组成，字母出现频率分别为 2、4、5、7、8，用这 5 个字母设计的哈夫曼树带权路径长度为（）")]),s._v(" "),n("ul",[n("li",[s._v("A.10")]),s._v(" "),n("li",[s._v("B.96")]),s._v(" "),n("li",[s._v("C.84")]),s._v(" "),n("li",[s._v("D.58")])]),s._v(" "),n("p",[s._v("11.一个完全二叉树的第 6 层有 9 个叶子结点，则这颗二叉树最多有多少个结点（）")]),s._v(" "),n("ul",[n("li",[s._v("A.41")]),s._v(" "),n("li",[s._v("B.109")]),s._v(" "),n("li",[s._v("C.40")]),s._v(" "),n("li",[s._v("D.119")])]),s._v(" "),n("p",[s._v("12.带权有向图 G 用邻接矩阵 A 存储，则顶点的入度等于 A 中（）")]),s._v(" "),n("ul",[n("li",[s._v("A.第i行非0的元素之和")]),s._v(" "),n("li",[s._v("B.第i列非0元素之和")]),s._v(" "),n("li",[s._v("C.第i行非无穷且非0元素的个数")]),s._v(" "),n("li",[s._v("D第i列非无穷且非0元素的个数")])]),s._v(" "),n("p",[s._v("13.设 N 个点 E 条边的图用邻接表存，则求每个顶点入度的时间复杂度为（）")]),s._v(" "),n("ul",[n("li",[s._v("A.O(N)")]),s._v(" "),n("li",[s._v("B.O(N^2)")]),s._v(" "),n("li",[s._v("C.O(N+E)")]),s._v(" "),n("li",[s._v("D.O(N*E)")])]),s._v(" "),n("p",[s._v("14.对序列 (15，9，7，8，20，1，4) 用快速排序方法升序排序，经过一趟排序后序列为（）")]),s._v(" "),n("ul",[n("li",[s._v("A.9，7，8，4，1，15，20")]),s._v(" "),n("li",[s._v("B.4，9，7，8，1，15，20")]),s._v(" "),n("li",[s._v("C.1，9，7，8，4，15，20")]),s._v(" "),n("li",[s._v("D.以上都不对")])]),s._v(" "),n("p",[s._v("15:对包含 n 个元素的散列表进行查找，平均查找长度（）")]),s._v(" "),n("ul",[n("li",[s._v("A.为 O(logn)")]),s._v(" "),n("li",[s._v("B.为 O(n)")]),s._v(" "),n("li",[s._v("C.与 n 无关")]),s._v(" "),n("li",[s._v("D.与装填因子有关")])]),s._v(" "),n("h2",{attrs:{id:"判断-1-15"}},[s._v("判断（1/15）")]),s._v(" "),n("p",[s._v("1.运算的定义依赖于逻辑结构，运算的实现也依赖于逻辑结构而与存储结构无关（）")]),s._v(" "),n("p",[s._v("2线性表的各种基本运算在顺序存储结构上的实现均比在链式存储结构上的实现效率要低（）")]),s._v(" "),n("p",[s._v("3.线性表中的所有元素都有一个前驱元素和后继元素（）")]),s._v(" "),n("p",[s._v("4.删除栈底元素是栈的基本操作（）")]),s._v(" "),n("p",[s._v("5.队列和栈都是运算受限的线性表，只允许在表的两端进行运算（）")]),s._v(" "),n("p",[s._v("6.设串 S 的长度为 n，则 S 的子串个数最多为 n(n+1)/2（）")]),s._v(" "),n("p",[s._v("7.给定串 S1和 S2 的度分别为 n、m，则针对 S1、S2 使用布鲁特-福斯算法在最好情况下的时间复杂度为 O(n+m)（）")]),s._v(" "),n("p",[s._v("8.在完全二叉树中，叶子结点的双亲的左兄弟(如果存在)一定不是叶子结点（）")]),s._v(" "),n("p",[s._v("9.完全二叉树中不适合顺序存储结构，只有满二叉树适合顺序存储结构（）")]),s._v(" "),n("p",[s._v("10.在完全二叉树中，若一个结点没有左孩子，则它必是叶子结点（）")]),s._v(" "),n("p",[s._v("11.在一个图中，所有顶点的度数之和等于所有边的数目的 2 倍（）")]),s._v(" "),n("p",[s._v("12.所有边的权值都不相同的带权无向图的最小生成树是唯一的（）")]),s._v(" "),n("p",[s._v("13.在一个有向图中，所有顶点的入度之和等于所有顶点的出度之和（）")]),s._v(" "),n("p",[s._v("14.二分查找中，表必须有序，表可以顺序方式存储，也可以链表方式存储（）")]),s._v(" "),n("p",[s._v("15.若在散列表中删除一个元素，不能简单地将该元素删除（）")]),s._v(" "),n("h2",{attrs:{id:"填空-2-30"}},[s._v("填空（2/30）")]),s._v(" "),n("p",[s._v("1.在最坏情况下的时间复杂度是（）")]),s._v(" "),n("p",[s._v("2.一个顺序表的第一个元素的存储地址是 0xl1f7c每个元素的长度为 4，则第 5 个元素的地址是（）")]),s._v(" "),n("p",[s._v("3.单链表中逻辑上相邻的元素，其物理位置（）相邻")]),s._v(" "),n("p",[s._v("4.线性表 (a1, a2...an) 以单链表方式时，访第 i 个位置的素的时间复度为（）")]),s._v(" "),n("p",[s._v("5.若一个的输入序列是 123...n，输出的第一个是 n，则第 i 个输出元素是（）")]),s._v(" "),n("p",[s._v("6.在用单链表实现队列时，队头在链表的（）位置")]),s._v(" "),n("p",[s._v("7.假设循环单链表表示的队列长度为 ，队头固定在链表表尾，若只设头指针，则入队操作的时间复杂度为（）")]),s._v(" "),n("p",[s._v("8.数组"),n("code",[s._v("A[1...5][1...6]")]),s._v("的每个元素占 5 个单元，将其按行优先顺序存储在起始地址为 1000 的连续内存单元中，则元素 "),n("code",[s._v("A[5][5]")]),s._v(" 的地址为（）")]),s._v(" "),n("p",[s._v("9.设目标 T=“abccdcdccbaa”，模式 P=cdcc”，则第（）匹配成功")]),s._v(" "),n("p",[s._v("10.假定一颗度为 3 的树中结点数为 50，则其最小高度为（）")]),s._v(" "),n("p",[s._v("11.已知一颗二叉树的后序历序列为 DABEC，中序遍历序列为 DEBAC，则先序遍历序列为（）")]),s._v(" "),n("p",[s._v("12.一颗哈夫曼树共有 215 个结点，对其进行哈夫曼编码，共能得到不同的码字数量为（）")]),s._v(" "),n("p",[s._v("13.一个具有 n 个顶点e条边的有向图的邻接矩阵中，零元素的个数为（）")]),s._v(" "),n("p",[s._v("14.具有 n 个顶点的有向图最多可包含的有向边的条数是（）")]),s._v(" "),n("p",[s._v("15.已知一个有序表 (13，18，24，35，47，50，62，83，90，115，134)，当二分查找值为 90 的元素时，查找成功的比较次数为（）")]),s._v(" "),n("h2",{attrs:{id:"问题求解-45"}},[s._v("问题求解（45）")]),s._v(" "),n("p",[s._v("1.(7分) 有5个元素，其入栈次序为 A、B、C、D、E，在各种出次序中，第一个出栈元素是 C 且第二个出栈元素为 D 的出栈序列有哪几个？")]),s._v(" "),n("p",[s._v("2.(7分) 一颗高度为 h 的满 m 树 (m 可以为2)有如下性质：根结点所在层次为第 1 层，第 h 层上的结点都是叶子结点，其余各层上每层结点都有 m 棵非空子树，如果按照层次自顶向下、同一层自左向右的顺序从 1 开始对全部结点进行编号，问")]),s._v(" "),n("ul",[n("li",[s._v("(1) 各层的结点个数是多少？")]),s._v(" "),n("li",[s._v("(2) 编号为 i 的结点的双亲结点(若存在)的编号是多少？")])]),s._v(" "),n("p",[s._v("3.(8分) 已知某有向带权图 11 个节点的连接方式如下表示，以节点3为出发点，使用 Diikstra 算法求其最短路径并写出其动态执行情况，填写下表，其中 U 表示选定的节点集合，"),n("code",[s._v("D[i]")]),s._v("表示源点到节点i的距离，"),n("code",[s._v("p[i]")]),s._v("表示源点到节点 i 时，节点 i 的前驱节点")]),s._v(" "),n("img",{attrs:{src:a(401)}}),s._v(" "),n("p",[s._v("4.(8分) 已知一个无向图如下图所示，给出从顶点 1 出发用 kruskal 算法生成所有可能的最小生成树的过程")]),s._v(" "),n("img",{attrs:{src:a(402)}}),s._v(" "),n("p",[s._v("5.(7分) 设散列表的度为 15，散列函数为 H(k) = k%13，给定的关键序列为19，14，23，01，68，20，84，27，55，11，10，79。试画出用线性探查法解决冲突时所构造的散列表，并求出在等概率情况下，这种方法的查找成功和查找不成功的平均查找长度")]),s._v(" "),n("p",[s._v("6.(8分) 已知序列 (503，87，512，61，908，170，897，275，653，462)，采用二路归并排序法对其进行排序，并写出排序过程")]),s._v(" "),n("h2",{attrs:{id:"算法设计-30"}},[s._v("算法设计（30）")]),s._v(" "),n("p",[s._v("1.(10分) 设计一个算法，将表中所有节点的方向“原地旋转”，要求利用原表的存储空间。例如：L = {0，2，4，6，8，10}，逆转后为 L = (10，8，6，4，2，0}")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Inverse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LinkList "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    LinkList p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    ____①____\n    L"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("____②____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        q "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" p"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        ____③____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        ____④____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        ____⑤____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("2.(10分) 请写出先序遍历的非递归算法")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("lChild"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("rChild"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("TreeNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("preOrder")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("TreeNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    TreeNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("stack "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" top "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("l"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    TreeNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" T"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("____①____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            stack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("____②____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进栈")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d\\t"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 入栈时，访问输出")]),s._v("\n            p "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ____③____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            p "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" stack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("____④____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 出栈")]),s._v("\n            p "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ____⑤____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("3.(10分) 设计一个算法，将一个无向图的邻接矩阵转换为邻接表。已知邻接矩阵和邻接，表的结构定义如下")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 邻接矩阵")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("Maxsize")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")])])]),s._v("\ntpyedef "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" vextype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AdjMatrix")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    vextype vexs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Maxsize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//存放顶点的数组")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Maxsize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Maxsize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//存放边的数组")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" vertexNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arcNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//图的顶点和边数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 邻接表")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("Maxsize")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token expression"}},[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")])])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("node")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//邻接链表结点")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" adjvex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//邻接点域")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("node")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//链域")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("edgenode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    vextype vertex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//顶点域")]),s._v("\n    edgenode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("link"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//指针域")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("vexnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AdjList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    vexnode adjlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Maxsize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" vertexNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arcNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//图的顶点和边数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("p",[s._v("补全如下程序，完成邻接矩阵转为邻接表算法")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("MatToList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AdjMatrix")]),s._v(" A"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AdjList")]),s._v(" B"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    B"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("vertexNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ____①____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    B"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("arcNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ____②____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" A"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("vertexNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        B"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("adjlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("vertex "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ____③____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        ____④____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" A"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("vertexNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("A"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("arc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                p"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("edgenode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("malloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("edgenode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n                ____⑤____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                ____⑥____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                ____⑦____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                p"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("edgenode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("malloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("edgenode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                ____⑧____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                ____⑨____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                ____⑩____"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);