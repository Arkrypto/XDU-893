(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{395:function(t,s,n){t.exports=n.p+"assets/img/image-20240203220240014.a12d7ad6.png"},396:function(t,s,n){t.exports=n.p+"assets/img/image-20240203220535835.c5c54e2a.png"},609:function(t,s,n){"use strict";n.r(s);var a=n(14),_=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"单选-2-30"}},[t._v("单选（2/30）")]),t._v(" "),a("p",[t._v("1.计算机算法指的是（）")]),t._v(" "),a("ul",[a("li",[t._v("A. 计算方法")]),t._v(" "),a("li",[t._v("B. 解决问题的步骤序列")]),t._v(" "),a("li",[t._v("C. 排序方法")]),t._v(" "),a("li",[t._v("D. 调度方法")])]),t._v(" "),a("p",[t._v("2.顺序表比链表（）")]),t._v(" "),a("ul",[a("li",[t._v("A. 更便于随机读取")]),t._v(" "),a("li",[t._v("C. 插入和删除更简便")]),t._v(" "),a("li",[t._v("B. 数据元素的物理存储范围更分散")]),t._v(" "),a("li",[t._v("D. 更适合线性逻辑结构")])]),t._v(" "),a("p",[t._v("3.在一个长度为 n 的顺序表的第 i (0 ≤ i ≤ n+1) 个位置上插入一个元素，需要后移（）个元素")]),t._v(" "),a("ul",[a("li",[t._v("A. n-i")]),t._v(" "),a("li",[t._v("B. n-i-l")]),t._v(" "),a("li",[t._v("C. n-i+1")]),t._v(" "),a("li",[t._v("D. n+i")])]),t._v(" "),a("p",[t._v("4.要从一个顺序表删除一个元素时，被删除元素之后的所有元素均需（）一个位置，移动过程是从（）向（）依次移动一个元素。")]),t._v(" "),a("ul",[a("li",[t._v("A. 前移，后，前")]),t._v(" "),a("li",[t._v("B. 前移，前，后")]),t._v(" "),a("li",[t._v("C. 后移，后，前")]),t._v(" "),a("li",[t._v("D. 后移，前，后")])]),t._v(" "),a("p",[t._v("5.向一个栈顶指针为 top 的链栈中插入一个 s 结点，应执行（）")]),t._v(" "),a("ul",[a("li",[t._v("A. top->next=s;")]),t._v(" "),a("li",[t._v("B. s->next = top; top=s;")]),t._v(" "),a("li",[t._v("C. s->next = top->next; top->next=s;")]),t._v(" "),a("li",[t._v("D. s->next = top; top = top->next;")])]),t._v(" "),a("p",[t._v("6.设某二叉树中度数为 0 的结点数为 N0，度数为 1 的结点数为 N1，度数为 2 的结点数为 N2，则下列等式成立的是（）")]),t._v(" "),a("ul",[a("li",[t._v("A. N0 = N1+1")]),t._v(" "),a("li",[t._v("B. N0 = N1+ N2")]),t._v(" "),a("li",[t._v("C. N0 = N2+1")]),t._v(" "),a("li",[t._v("D. N0 = 2N1+1")])]),t._v(" "),a("p",[t._v("7.一棵二叉树的后序遍历序列为 C、A、E、B、D，中序遍历序列为D、A、C、B、E，则先序遍历序列为（）")]),t._v(" "),a("ul",[a("li",[t._v("A. D、B、A、C、E")]),t._v(" "),a("li",[t._v("C. C、E、D、B、A")]),t._v(" "),a("li",[t._v("B. D、A、B、E、C")]),t._v(" "),a("li",[t._v("D. C、B、D、A、E")])]),t._v(" "),a("p",[t._v("8.Huftman 树的带权路径长度等于（）")]),t._v(" "),a("ul",[a("li",[t._v("A. 除根结点之外的所有结点权值之和")]),t._v(" "),a("li",[t._v("C. 各叶子结点的带权路径长度之和")]),t._v(" "),a("li",[t._v("B. 所有结点权值之和")]),t._v(" "),a("li",[t._v("D. 根结点的值")])]),t._v(" "),a("p",[t._v("9.设有6个顶点的无向图，该图至少有（）条边，才能确保是一个连通图")]),t._v(" "),a("ul",[a("li",[t._v("A. 5")]),t._v(" "),a("li",[t._v("B. 6")]),t._v(" "),a("li",[t._v("C. 7")]),t._v(" "),a("li",[t._v("D. 8")])]),t._v(" "),a("p",[t._v("10.设某无向图中有 n 个顶点 e 条边，则建立该图邻接表的时间复杂度为（）")]),t._v(" "),a("ul",[a("li",[t._v("A. O(n+e)")]),t._v(" "),a("li",[t._v("B. O(n^2)")]),t._v(" "),a("li",[t._v("C. O(n*e)")]),t._v(" "),a("li",[t._v("D. O(n^3)")])]),t._v(" "),a("p",[t._v("11.若图的邻接矩阵中主对角线上的元素全是 0，其余元素全是 1，则可以断定该图一定是（）")]),t._v(" "),a("ul",[a("li",[t._v("A. 无向图")]),t._v(" "),a("li",[t._v("B. 不是带权图")]),t._v(" "),a("li",[t._v("C. 有向图")]),t._v(" "),a("li",[t._v("D. 完全图")])]),t._v(" "),a("p",[t._v("12.已知采用开放地址法解决散列表冲突，要从此散列表中删除一个记录，正确的做法是（）")]),t._v(" "),a("ul",[a("li",[t._v("A. 将该元素所在的存储单元清空")]),t._v(" "),a("li",[t._v("B. 在该元素上做删除标记。")]),t._v(" "),a("li",[t._v("C. 将与该元素有相同 Hash 地址的后继元素顺次前移一个位置。")]),t._v(" "),a("li",[t._v("D. 用与该元素有相同Hash 地址的最后插入表中的元素替代。")])]),t._v(" "),a("p",[t._v("13.散列函数有一个共同性质，即函数值应当以（）取其值域的每个值")]),t._v(" "),a("ul",[a("li",[t._v("A. 最大概率")]),t._v(" "),a("li",[t._v("B. 最小概率")]),t._v(" "),a("li",[t._v("C. 平均概率")]),t._v(" "),a("li",[t._v("D. 等概率")])]),t._v(" "),a("p",[t._v("14.快速排序方法在（）情况下最不利于发挥其长处")]),t._v(" "),a("ul",[a("li",[t._v("A. 要排序的数据量太大")]),t._v(" "),a("li",[t._v("B. 要排序的数据中含有多个相同值")]),t._v(" "),a("li",[t._v("C. 要排序的数据已基本有序")]),t._v(" "),a("li",[t._v("D. 要排序的数据个数为奇数")])]),t._v(" "),a("p",[t._v("15.在归并排序过程中，需归并的趟数为（）")]),t._v(" "),a("ul",[a("li",[t._v("A. √n")]),t._v(" "),a("li",[t._v("B. ⌈lbn⌉")]),t._v(" "),a("li",[t._v("C. n")]),t._v(" "),a("li",[t._v("D. ⌊lbn⌋")])]),t._v(" "),a("h2",{attrs:{id:"判断-1-15"}},[t._v("判断（1/15）")]),t._v(" "),a("p",[t._v("1.线性表中的所有元素都有一个前驱元素和后继元素（）")]),t._v(" "),a("p",[t._v("2.栈和队列的存储方式只能是链接方式（）")]),t._v(" "),a("p",[t._v("3.查找和修改是对数组的基本操作（）")]),t._v(" "),a("p",[t._v("4.二叉树的后序遍历序列中，任意一个结点均处在其孩子结点的后面（）")]),t._v(" "),a("p",[t._v("5.一个含有 n 个结点的完全二叉树，它的高度是 ⌊ logn ⌋+1（）")]),t._v(" "),a("p",[t._v("6.当向二叉排序树中插入一个结点，则该结点一定成为叶子结点（）")]),t._v(" "),a("p",[t._v("7.调用一次深度优先遍历可以访问到图中的所有顶点（）")]),t._v(" "),a("p",[t._v("8.带权无向图的最小生成树是唯一的（）")]),t._v(" "),a("p",[t._v("9.如果表示某个图的邻接矩阵是不对称矩阵，则该图一定是有向图（）")]),t._v(" "),a("p",[t._v("10.在一个有向图的拓扑序列中,若顶点a在顶点b之前,则图中必有一条弧<a, b>（）")]),t._v(" "),a("p",[t._v("11.在散列法中，散列函数必须是一个一对一的函数（）")]),t._v(" "),a("p",[t._v("12.散列表发生冲突的可能性与装填因子无关（）")]),t._v(" "),a("p",[t._v("13.索引顺序结构和索引非顺序结构的索引表中索引项都是按照关键字顺序排列的（）")]),t._v(" "),a("p",[t._v("14.对 个元素执行快速排序，在进行第一次划分时，关键字的比较次数总是 n-1 次（）")]),t._v(" "),a("p",[t._v("15.归并排序算法中辅助组所需的空间复杂度为 O(n)（）")]),t._v(" "),a("h2",{attrs:{id:"填空-2-30"}},[t._v("填空（2/30）")]),t._v(" "),a("p",[t._v("1.数据的物理结构主要包括  和（）两种情况")]),t._v(" "),a("p",[t._v("2.顺序表中逻辑上（）的元素的物理位置相邻")]),t._v(" "),a("p",[t._v("3.在双向循环链表中，在m 所指的结点之后插入 n 指针所指的结点，其操作是（）; n->next = m->next; m->next->prior = n; m->next=n;")]),t._v(" "),a("p",[t._v("4.设有一个空栈，现有输入序列 (a,b,c,d,e)，经过 push，push，pop，push，pop，push，push 的操作，输出序列是（）")]),t._v(" "),a("p",[t._v("5.两个字符串相等的充要条件是两个串的（）相等和对应位置的字符相等")]),t._v(" "),a("p",[t._v("6.装有n个叶子的哈夫曼树的结点总数为（）")]),t._v(" "),a("p",[t._v("7.设二叉树中结点的两个指针域分别为 lchild 和 rchild，则判断指针变量 p 所指向的结点为叶子结点的条件是（）")]),t._v(" "),a("p",[t._v("8.根据初始关键字序列(19、22、01、38、10)建立的二叉排序树的高度为（）")]),t._v(" "),a("p",[t._v("9.设一棵二叉树的前序序列为 ABC， 则有（）种不同的二叉树可以得到这种序列")]),t._v(" "),a("p",[t._v("10.解决散列表冲突的两种方法是（）和（）")]),t._v(" "),a("p",[t._v("11.对于一个具有 n 个顶点和 e 条边的无向图，如果采用邻接表存储方法存储该无向图边表中所含结点有（）")]),t._v(" "),a("p",[t._v("12.在一个具有 n 个顶点的完全有向图中，包含有（）条边")]),t._v(" "),a("p",[t._v("13.设某无向图中顶点数和边数分别为 n 和 e，所有顶点的度数之和为 d，则 e = （）")]),t._v(" "),a("p",[t._v("14.对一个长度为 n 的任意文件进行排序，至少需要（）次比较")]),t._v(" "),a("p",[t._v("15.对 n 个元素进行冒泡排序时，最少的比较次数是（）")]),t._v(" "),a("h2",{attrs:{id:"问题求解-45"}},[t._v("问题求解（45）")]),t._v(" "),a("p",[t._v("1.(7分) 假设字符集 {a,b,c,d,e,f} 对应的权重为 {45,13,12,16,9,5}")]),t._v(" "),a("ul",[a("li",[t._v("(1) 为这 6 个字符建立Haffman树，并给出相应的 Hafman 编码，要求左子树权重小于右子树且编码时左边为 0 右边为 1")]),t._v(" "),a("li",[t._v("(2) 求出Haffman树的带权路径长度WPL")])]),t._v(" "),a("p",[t._v("2.(8分) 设完全二叉树的顺序存储结构中存储数据 ABCDE，要求画出该完全二叉树并给出该二叉树的前序、中序和后序遍历序列")]),t._v(" "),a("p",[t._v("3.(7分) 一个线性表为 B=(12,23,45,57,20,03,78,31,15,36),设散列表为 HT[0...12]!\n散列函数为 H(key)=key%13 并用线性探查法解决冲突，请画出散列表，并计算等概率情况下查找成功的平均查找长度")]),t._v(" "),a("p",[t._v("4.(7分) 下图是有 5个顶点 (1,2,3,4,5) 的无向图。请回答相关问题")]),t._v(" "),a("img",{attrs:{src:n(395)}}),t._v(" "),a("ul",[a("li",[t._v("(1) 请画出该图的邻接矩阵和邻接表")]),t._v(" "),a("li",[t._v("(2) 若该图采用邻接矩阵表示，按邻接点序号从小到大选择，给出从顶点 2开始的广度优先搜索序列")]),t._v(" "),a("li",[t._v("(3) 在广度优先搜索算法中，除了邻接矩阵，还使用了什么数据结构")])]),t._v(" "),a("p",[t._v("5.(8分) 有6个顶点(V0,V1,V2,V3,V4,V5)的有向图的邻接矩阵如下图。请回答相关问题")]),t._v(" "),a("img",{attrs:{src:n(396)}}),t._v(" "),a("ul",[a("li",[t._v("(1) 画出该有向图")]),t._v(" "),a("li",[t._v("(2) 求从顶点 vo开始到其余顶点的最短路径。按最短路径生成的次序填写下表")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("步骤")]),t._v(" "),a("th",[t._v("最短路径点集 S")]),t._v(" "),a("th",[t._v("选择的顶点")]),t._v(" "),a("th",[t._v("源点到各顶点的长度"),a("br"),t._v("D[0]   D[1]   D[2]   D[3]   D[4]   D[5]")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("初始")]),t._v(" "),a("td",[t._v("{0}")]),t._v(" "),a("td",[t._v("-")]),t._v(" "),a("td",[t._v("0  M  10  M  30  100")])]),t._v(" "),a("tr",[a("td",[t._v("第一步")]),t._v(" "),a("td",[t._v("{0, 2}")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("第二步")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("第三步")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("第四步")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("第五步")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("6.(8分) 某人去超市购物，设有n种物品，第i种物品的重量为 wi，价值为 vi，一个人最多能带的重量为 c(c>0)")]),t._v(" "),a("ul",[a("li",[t._v("(1) 请设计一个算法使得一个人能带走的物品价值最大")]),t._v(" "),a("li",[t._v("(2) 如果有 3 种物品，第一种物品是大米重 5 公斤，价值 50元;第二种物品是面粉\n重10公斤，价值80元;第三种物品是土豆重15 公斤，价值45 元。已知一个人\n最多能带 25 公斤。根据设计的算法，给出最优的方案 (每种物品的携带数量)")])]),t._v(" "),a("h2",{attrs:{id:"算法-30"}},[t._v("算法（30）")]),t._v(" "),a("p",[t._v("1.(10分) 已知线性表的元素是无序的，实现一个删除表中所有值小于 max 但大于 min 的元素的算法，该线性表以带头结点的单链表为存储结构")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    LinkList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 在此作答 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("2.(10分) 编写一个非递归算法的函数求出二叉排序树中的关键字最小的元素(注意异常情况的处理)，数据结构如下所示")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ElemType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ElemType data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("BTreeNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("请据此填写以下函数 (提示：二叉排序树中的位置信息对应于关键字大小信息)")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindMax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("BST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tBTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" __①__ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“不能在空树上查找最小值"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\\n”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    __②__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        __③__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" __④__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("3.(10分) 利用图的深度优先搜索写一个算法，判别以邻接表方式表示的有向图中是否存在由顶点到顶点的路径 (i≠j)")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("N")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")])])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" adjvex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("ledgenode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" vertex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tedgenode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("link"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("vexnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" exist path "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DFS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vexnode ga"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*以邻接表为存储结构，判断v和之间是否有路径，若有返回1，否则返回0*/")]),t._v("\n\tedgenode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" __①__ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        visited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*标记已被访问*/")]),t._v("\n        __②__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*访问v的第一个邻接点*/")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" __③__ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*依次访问 v;的接点*/")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" __④__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" __⑤__ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*vi的邻接点若未被访问过，且该邻接点到vj存在路径*/")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br")])])])}),[],!1,null,null,null);s.default=_.exports}}]);